break_coalition = {
	clr_country_flag = has_coalition
	clr_country_flag = coalition_islamist
	clr_country_flag = coalition_fascist
	clr_country_flag = coalition_nationalist
	clr_country_flag = coalition_monarchist
	clr_country_flag = coalition_reactionary
	clr_country_flag = coalition_conservative
	clr_country_flag = coalition_classical_liberal
	clr_country_flag = coalition_social_liberal
	clr_country_flag = coalition_social_democrat
	clr_country_flag = coalition_progressive
	clr_country_flag = coalition_democratic_socialist
	clr_country_flag = coalition_communist
	clear_variable = ROOT.Coalition
}

update_coalition = {
	set_variable = {
		var = ROOT.Coalition
		value = 0
	}
	if = {
		limit = {
			has_country_flag = coalition_islamist
		}
		add_to_variable = { ROOT.Coalition = islamist_seats }
	}
	if = {
		limit = {
			has_country_flag = coalition_fascist
		}
		add_to_variable = { ROOT.Coalition = fascist_seats }
	}
	if = {
		limit = {
			has_country_flag = coalition_nationalist
		}
		add_to_variable = { ROOT.Coalition = nationalist_seats }
	}
	if = {
		limit = {
			has_country_flag = coalition_monarchist
		}
		add_to_variable = { ROOT.Coalition = monarchist_seats }
	}
	if = {
		limit = {
			has_country_flag = coalition_reactionary
		}
		add_to_variable = { ROOT.Coalition = reactionary_seats }
	}
	if = {
		limit = {
			has_country_flag = coalition_conservative
		}
		add_to_variable = { ROOT.Coalition = conservative_seats }
	}
	if = {
		limit = {
			has_country_flag = coalition_classical_liberal
		}
		add_to_variable = { ROOT.Coalition = classical_liberal_seats }
	}
	if = {
		limit = {
			has_country_flag = coalition_social_liberal
		}
		add_to_variable = { ROOT.Coalition = social_liberal_seats }
	}
	if = {
		limit = {
			has_country_flag = coalition_social_democrat
		}
		add_to_variable = { ROOT.Coalition = social_democrat_seats }
	}
	if = {
		limit = {
			has_country_flag = coalition_progressive
		}
		add_to_variable = { ROOT.Coalition = progressive_seats }
	}
	if = {
		limit = {
			has_country_flag = coalition_democratic_socialist
		}
		add_to_variable = { ROOT.Coalition = democratic_socialist_seats }
	}
	if = {
		limit = {
			has_country_flag = coalition_communist
		}
		add_to_variable = { ROOT.Coalition = communist_seats }
	}
	if = {
		limit = {
			NOT = { has_country_flag = has_coalition }
		}
		break_coalition = yes
	}
	create_pie_chart = yes
}

cleanup_coalition = {
	clr_country_flag = government_chosen
	clr_country_flag = government_islamist
	clr_country_flag = government_fascist
	clr_country_flag = government_nationalist
	clr_country_flag = government_monarchist
	clr_country_flag = government_reactionary
	clr_country_flag = government_conservative
	clr_country_flag = government_classical_liberal
	clr_country_flag = government_social_liberal
	clr_country_flag = government_social_democrat
	clr_country_flag = government_progressive
	clr_country_flag = government_democratic_socialist
	clr_country_flag = government_communist
	clr_country_flag = coalition_chosen
	clear_variable = ROOT.NewCoalition
}

quickset_parliament = {
	set_variable = { communist_seats = party_popularity@communist }
	multiply_variable = { communist_seats = 100 }
	set_variable = { democratic_socialist_seats = party_popularity@democratic_socialist }
	multiply_variable = { democratic_socialist_seats = 100 }
	set_variable = { progressive_seats = party_popularity@progressive }
	multiply_variable = { progressive_seats = 100 }
	set_variable = { social_democrat_seats = party_popularity@social_democrat }
	multiply_variable = { social_democrat_seats = 100 }
	set_variable = { social_liberal_seats = party_popularity@social_liberal }
	multiply_variable = { social_liberal_seats = 100 }
	set_variable = { classical_liberal_seats = party_popularity@classical_liberal }
	multiply_variable = { classical_liberal_seats = 100 }
	set_variable = { conservative_seats = party_popularity@conservative }
	multiply_variable = { conservative_seats = 100 }
	set_variable = { reactionary_seats = party_popularity@reactionary }
	multiply_variable = { reactionary_seats = 100 }
	set_variable = { monarchist_seats = party_popularity@monarchist }
	multiply_variable = { monarchist_seats = 100 }
	set_variable = { nationalist_seats = party_popularity@nationalist }
	multiply_variable = { nationalist_seats = 100 }
	set_variable = { fascist_seats = party_popularity@fascist }
	multiply_variable = { fascist_seats = 100 }
	set_variable = { islamist_seats = party_popularity@islamist }
	multiply_variable = { islamist_seats = 100 }
	set_parliament_graphics = yes
}

quickset_coalition = {
    set_country_flag = has_coalition
	set_variable = { ROOT.Coalition = 0 }
	if = {
		limit = {
			has_government = communist
		}
		set_country_flag = coalition_communist
        set_variable = { ROOT.Coalition = communist_seats }
	}
	if = {
		limit = {
			has_government = democratic_socialist
		}
		set_country_flag = coalition_democratic_socialist
        set_variable = { ROOT.Coalition = democratic_socialist_seats }
	}
	if = {
		limit = {
			has_government = progressive
		}
		set_country_flag = coalition_progressive
        set_variable = { ROOT.Coalition = progressive_seats }
	}
	if = {
		limit = {
			has_government = social_democrat
		}
		set_country_flag = coalition_social_democrat
        set_variable = { ROOT.Coalition = social_democrat_seats }
	}
	if = {
		limit = {
			has_government = social_liberal
		}
		set_country_flag = coalition_social_liberal
        set_variable = { ROOT.Coalition = social_liberal_seats }
	}
	if = {
		limit = {
			has_government = classical_liberal
		}
		set_country_flag = coalition_classical_liberal
        set_variable = { ROOT.Coalition = classical_liberal_seats }
	}
	if = {
		limit = {
			has_government = conservative
		}
		set_country_flag = coalition_conservative
        set_variable = { ROOT.Coalition = conservative_seats }
	}
	if = {
		limit = {
			has_government = reactionary
		}
		set_country_flag = coalition_reactionary
        set_variable = { ROOT.Coalition = reactionary_seats }
	}
	if = {
		limit = {
			has_government = monarchist
		}
		set_country_flag = coalition_monarchist
        set_variable = { ROOT.Coalition = monarchist_seats }
	}
	if = {
		limit = {
			has_government = nationalist
		}
		set_country_flag = coalition_nationalist
        set_variable = { ROOT.Coalition = nationalist_seats }
	}
	if = {
		limit = {
			has_government = fascist
		}
		set_country_flag = coalition_fascist
        set_variable = { ROOT.Coalition = fascist_seats }
	}
	if = {
		limit = {
			has_government = islamist
		}
		set_country_flag = coalition_islamist
        set_variable = { ROOT.Coalition = islamist_seats }
	}
	set_parliament_graphics_2 = yes
}

set_parliament_graphics = {

## CLARIFICATION
# Every ideology has a number from 1 to 12.
# There will be a parliament array with 25 entries of numbers reaching from 1 to 12, each defining a seat for a certain ideology.
# It involves a huge amount of code, I hope it won't kill the performance
#
## Step 1 : Create new variables to work with
	set_variable = { communist_seats_parliament = communist_seats }
	set_variable = { democratic_socialist_seats_parliament = democratic_socialist_seats }
	set_variable = { social_democrat_seats_parliament = social_democrat_seats }
	set_variable = { progressive_seats_parliament = progressive_seats }
	set_variable = { social_liberal_seats_parliament = social_liberal_seats }
	set_variable = { classical_liberal_seats_parliament = classical_liberal_seats }
	set_variable = { conservative_seats_parliament = conservative_seats }
	set_variable = { islamist_seats_parliament = islamist_seats }
	set_variable = { monarchist_seats_parliament = monarchist_seats }
	set_variable = { reactionary_seats_parliament = reactionary_seats }
	set_variable = { nationalist_seats_parliament = nationalist_seats }
	set_variable = { fascist_seats_parliament = fascist_seats }

## Step 2 : Round variables

	round_variable = communist_seats_parliament
	round_variable = democratic_socialist_seats_parliament
	round_variable = social_democrat_seats_parliament
	round_variable = progressive_seats_parliament
	round_variable = social_liberal_seats_parliament
	round_variable = classical_liberal_seats_parliament
	round_variable = conservative_seats_parliament
	round_variable = islamist_seats_parliament
	round_variable = monarchist_seats_parliament
	round_variable = reactionary_seats_parliament
	round_variable = nationalist_seats_parliament
	round_variable = fascist_seats_parliament

## Step 3 : Divide by 2 (For a graphic of 50 seats)

	divide_variable = { communist_seats_parliament = 2 }
	divide_variable = { democratic_socialist_seats_parliament = 2 }
	divide_variable = { social_democrat_seats_parliament = 2 }
	divide_variable = { progressive_seats_parliament = 2 }
	divide_variable = { social_liberal_seats_parliament = 2 }
	divide_variable = { classical_liberal_seats_parliament = 2 }
	divide_variable = { conservative_seats_parliament = 2 }
	divide_variable = { islamist_seats_parliament = 2 }
	divide_variable = { monarchist_seats_parliament = 2 }
	divide_variable = { reactionary_seats_parliament = 2 }
	divide_variable = { nationalist_seats_parliament = 2 }
	divide_variable = { fascist_seats_parliament = 2 }

## Step 4 : Round again

	round_variable = communist_seats_parliament
	round_variable = democratic_socialist_seats_parliament
	round_variable = social_democrat_seats_parliament
	round_variable = progressive_seats_parliament
	round_variable = social_liberal_seats_parliament
	round_variable = classical_liberal_seats_parliament
	round_variable = conservative_seats_parliament
	round_variable = islamist_seats_parliament
	round_variable = monarchist_seats_parliament
	round_variable = reactionary_seats_parliament
	round_variable = nationalist_seats_parliament
	round_variable = fascist_seats_parliament

## Step 5: Assign seats


	add_to_array = { ideology_seats_array = 0 } # Placeholder, I need the frames to be 1-12 and not 0-11
	add_to_array = { ideology_seats_array = communist_seats_parliament }
	add_to_array = { ideology_seats_array = democratic_socialist_seats_parliament }
	add_to_array = { ideology_seats_array = social_democrat_seats_parliament }
	add_to_array = { ideology_seats_array = progressive_seats_parliament }
	add_to_array = { ideology_seats_array = social_liberal_seats_parliament }
	add_to_array = { ideology_seats_array = classical_liberal_seats_parliament }
	add_to_array = { ideology_seats_array = conservative_seats_parliament }
	add_to_array = { ideology_seats_array = islamist_seats_parliament }
	add_to_array = { ideology_seats_array = monarchist_seats_parliament }
	add_to_array = { ideology_seats_array = reactionary_seats_parliament }
	add_to_array = { ideology_seats_array = nationalist_seats_parliament }
	add_to_array = { ideology_seats_array = fascist_seats_parliament }

	for_each_loop = {
		array = ideology_seats_array
		if = {
			limit = {
				check_variable = { v > 49 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 48 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 47 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 46 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 45 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 44 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 43 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 42 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 41 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 40 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 39 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 38 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 37 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 36 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 35 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 34 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 33 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 32 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 31 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 30 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 29 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 28 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 27 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 26 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 25 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 24 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 23 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 22 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 21 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 20 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 19 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 18 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 17 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 16 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 15 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 14 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 13 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 12 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 11 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 10 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 9 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 8 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 7 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 6 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 5 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 4 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 3 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 2 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 1 }
			}
			add_to_array = { parliament_array = i }
		}
		if = {
			limit = {
				check_variable = { v > 0 }
			}
			add_to_array = { parliament_array = i }
		}
	}
	if = {
		limit = {
			check_variable = { parliament_array^num > 51 }
		}
		resize_array = {
			parliament_array = 51
		}
	}
	create_pie_chart = yes
}

set_parliament_graphics_2 = {
	set_variable = {
		ROOT.GroupGFX = ROOT.Coalition
	}
	divide_variable = { ROOT.GroupGFX = 100 }
	multiply_variable = { ROOT.GroupGFX = 230 }

	set_variable = {
		ROOT.Opposition = 100
	}
	subtract_from_variable = {
		ROOT.Opposition = ROOT.Coalition
	}
}

set_coalition_to_array = {
	if = {
		limit = {
			has_country_flag = coalition_islamist
		}
		add_to_array = { member_parties_array = 1 }
	}
	if = {
		limit = {
			has_country_flag = coalition_fascist
		}
		add_to_array = { member_parties_array = 2 }
	}
	if = {
		limit = {
			has_country_flag = coalition_nationalist
		}
		add_to_array = { member_parties_array = 3 }
	}
	if = {
		limit = {
			has_country_flag = coalition_monarchist
		}
		add_to_array = { member_parties_array = 4 }
	}
	if = {
		limit = {
			has_country_flag = coalition_reactionary
		}
		add_to_array = { member_parties_array = 5 }
	}
	if = {
		limit = {
			has_country_flag = coalition_conservative
		}
		add_to_array = { member_parties_array = 6 }
	}
	if = {
		limit = {
			has_country_flag = coalition_classical_liberal
		}
		add_to_array = { member_parties_array = 7 }
	}
	if = {
		limit = {
			has_country_flag = coalition_social_liberal
		}
		add_to_array = { member_parties_array = 8 }
	}
	if = {
		limit = {
			has_country_flag = coalition_social_democrat
		}
		add_to_array = { member_parties_array = 9 }
	}
	if = {
		limit = {
			has_country_flag = coalition_progressive
		}
		add_to_array = { member_parties_array = 10 }
	}
	if = {
		limit = {
			has_country_flag = coalition_democratic_socialist
		}
		add_to_array = { member_parties_array = 11 }
	}
	if = {
		limit = {
			has_country_flag = coalition_communist
		}
		add_to_array = { member_parties_array = 12 }
	}
}

# Scripted GUI Pie Chart by Yard1

# this creates a pie chart of popularities - can be easily adapted to show anything that adds up to 100%
create_pie_chart = {
	clear_array = pie_chart
	resize_array = {
		array = pie_chart
		value = 1 # 1 is value for neutrality frame, so we don't have to make a loop for it
		size = 100 # 100 pieces, each percent is one piece
	}
	set_temp_variable = { communist_pop = party_popularity_100@communist }
	round_temp_variable = communist_pop

	set_temp_variable = { democratic_socialist_pop = party_popularity_100@democratic_socialist }
	round_temp_variable = democratic_socialist_pop 
	set_variable = { ROOT.last_idx = communist_pop }
	add_to_temp_variable = { democratic_socialist_pop = ROOT.last_idx }
	for_loop_effect = {
		start = ROOT.last_idx
		end = democratic_socialist_pop
		set_variable = { pie_chart^v = 2 }
		add_to_variable = { ROOT.last_idx = 1 }
	}

	set_temp_variable = { social_democrat_pop = party_popularity_100@social_democrat }
	round_temp_variable = social_democrat_pop 
	#set_variable = { ROOT.last_idx = democratic_socialist_pop }
	add_to_temp_variable = { social_democrat_pop = ROOT.last_idx }
	for_loop_effect = {
		start = ROOT.last_idx
		end = social_democrat_pop
		set_variable = { pie_chart^v = 3 }
		add_to_variable = { ROOT.last_idx = 1 }
	}

	set_temp_variable = { progressive_pop = party_popularity_100@progressive }
	round_temp_variable = progressive_pop 
	#set_variable = { ROOT.last_idx = social_democrat_pop }
	add_to_temp_variable = { progressive_pop = ROOT.last_idx }
	for_loop_effect = {
		start = ROOT.last_idx
		end = progressive_pop
		set_variable = { pie_chart^v = 4 }
		add_to_variable = { ROOT.last_idx = 1 }
	}

	set_temp_variable = { social_liberal_pop = party_popularity_100@social_liberal }
	round_temp_variable = social_liberal_pop 
	#set_variable = { ROOT.last_idx = progressive_pop }
	add_to_temp_variable = { social_liberal_pop = ROOT.last_idx }
	for_loop_effect = {
		start = ROOT.last_idx
		end = social_liberal_pop
		set_variable = { pie_chart^v = 5 }
		add_to_variable = { ROOT.last_idx = 1 }
	}

	set_temp_variable = { classical_liberal_pop = party_popularity_100@classical_liberal }
	round_temp_variable = classical_liberal_pop 
	#set_variable = { ROOT.last_idx = social_liberal }
	add_to_temp_variable = { classical_liberal_pop = ROOT.last_idx }
	for_loop_effect = {
		start = ROOT.last_idx
		end = classical_liberal_pop
		set_variable = { pie_chart^v = 6 }
		add_to_variable = { ROOT.last_idx = 1 }
	}

	set_temp_variable = { conservative_pop = party_popularity_100@conservative }
	round_temp_variable = conservative_pop 
	#set_variable = { ROOT.last_idx = classical_liberal_pop }
	add_to_temp_variable = { conservative_pop = ROOT.last_idx }
	for_loop_effect = {
		start = ROOT.last_idx
		end = conservative_pop
		set_variable = { pie_chart^v = 7 }
		add_to_variable = { ROOT.last_idx = 1 }
	}

	set_temp_variable = { islamist_pop = party_popularity_100@islamist }
	round_temp_variable = islamist_pop 
	#set_variable = { ROOT.last_idx = conservative_pop }
	add_to_temp_variable = { islamist_pop = ROOT.last_idx }
	for_loop_effect = {
		start = ROOT.last_idx
		end = islamist_pop
		set_variable = { pie_chart^v = 8 }
		add_to_variable = { ROOT.last_idx = 1 }
	}

	set_temp_variable = { monarchist_pop = party_popularity_100@monarchist }
	round_temp_variable = monarchist_pop 
	#set_variable = { ROOT.last_idx = islamist_pop }
	add_to_temp_variable = { monarchist_pop = ROOT.last_idx }
	for_loop_effect = {
		start = ROOT.last_idx
		end = monarchist_pop
		set_variable = { pie_chart^v = 9 }
		add_to_variable = { ROOT.last_idx = 1 }
	}

	set_temp_variable = { reactionary_pop = party_popularity_100@reactionary }
	round_temp_variable = reactionary_pop 
	#set_variable = { ROOT.last_idx = monarchist_pop }
	add_to_temp_variable = { reactionary_pop = ROOT.last_idx }
	for_loop_effect = {
		start = ROOT.last_idx
		end = reactionary_pop
		set_variable = { pie_chart^v = 10 }
		add_to_variable = { ROOT.last_idx = 1 }
	}

	set_temp_variable = { nationalist_pop = party_popularity_100@nationalist }
	round_temp_variable = nationalist_pop 
	#set_variable = { ROOT.last_idx = reactionary_pop }
	add_to_temp_variable = { nationalist_pop = ROOT.last_idx }
	for_loop_effect = {
		start = ROOT.last_idx
		end = nationalist_pop
		set_variable = { pie_chart^v = 11 }
		add_to_variable = { ROOT.last_idx = 1 }
	}

	set_temp_variable = { fascist_pop = party_popularity_100@fascist }
	round_temp_variable = fascist_pop 
	add_to_temp_variable = { fascist_pop = ROOT.last_idx }
	for_loop_effect = {
		start = ROOT.last_idx
		end = fascist_pop
		set_variable = { pie_chart^v = 12 }
	}

	clear_variable = ROOT.last_idx
	add_to_variable = { pie_chart_dirty = 1 }
}